Below is an **example approach** to incorporate **product variants**—as represented in your TSV—into your React app. This will involve three main changes:

1. **Overhauling** the data structure in `categoriesData.js` so each product can have **multiple variants**.  
2. Adding or modifying a **Product Detail** component (or route) where the user can select a variant.  
3. Ensuring that when an item is added to cart, the **variant** info also appears in the cart.  

Along the way, we’ll also demonstrate how to **fix the Google Drive links** so they can be properly displayed. (We’ll convert a link like `https://drive.google.com/file/d/<FILE_ID>/view?usp=drive_link` into `https://drive.google.com/uc?export=view&id=<FILE_ID>`.)

---

## 1) Parsing Your TSV and Building the Data Structure

From your TSV data:

```
Categorias    Foto Categoria                                                              Produto       Variante              Preço  Foto
Desejos       https://drive.google.com/file/d/1ek7Rw8ZpvLF15iHtbltq3uBD-UobGfq9/view?...  Harmonia      Lavanda              40     https://drive.google.com/file/d/12s1iaSYz6foLSWjPjWdE0-vyMbbdf4nD/view?...
              (blank)                                                                     Serenidade    Orquidia             40     https://drive.google.com/file/d/1L-Mq6LjbQ9UndSbmRHkp8S0TE0-hGmXa/view?...
              (blank)                                                                     Sorte         Herbal               40     https://drive.google.com/file/d/1ek7Rw8ZpvLF15iHtbltq3uBD-UobGfq9/view?...
              (blank)                                                                     Abundancia    Alecrim              40     https://drive.google.com/file/d/1MBoVGnBn5CZMyO-YEWD1c0X19XGUVxRV/view?...
              (blank)                                                                     Vitalidade    Flor de Laranjeira  40     https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?...
              (blank)                                                                     Paixão        Cravo e Canela       40     https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?...

Clássicas     https://drive.google.com/file/d/12s1iaSYz6foLSWjPjWdE0-vyMbbdf4nD/view?...  Glitter       Lavanda              50     https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?...
              (blank)                                                                     Glitter       Orquiídia           50     (same link or similar)
              (blank)                                                                     Glitter       Herbal              50
              (blank)                                                                     Glitter       Flor de Laranjeira  50
              (blank)                                                                     Pote 230g     Flor de Laranjeira  50

Gesso         https://drive.google.com/file/d/1L-Mq6LjbQ9UndSbmRHkp8S0TE0-hGmXa/view?...  Verde         Herbal              45
              (blank)                                                                     Roxo          Lavanda             45
```

> **Notice** that some “Produto” names repeat for multiple variants (e.g. `"Glitter"` in “Clássicas” has 4 variants). Others appear only once (e.g. `"Paixão"`, `"Pote 230g"`). Either way, we’ll group them by `products[].variants[]`.

### Convert Google Drive Links

1. Original share link (example):  
   ```
   https://drive.google.com/file/d/<FILE_ID>/view?usp=drive_link
   ```
2. **Direct-embed link**:  
   ```
   https://drive.google.com/uc?export=view&id=<FILE_ID>
   ```

For instance, if your category photo is:  
```
https://drive.google.com/file/d/1ek7Rw8ZpvLF15iHtbltq3uBD-UobGfq9/view?usp=drive_link
```
The `FILE_ID` is `1ek7Rw8ZpvLF15iHtbltq3uBD-UobGfq9`, so your **embeddable** link becomes:
```
https://drive.google.com/uc?export=view&id=1ek7Rw8ZpvLF15iHtbltq3uBD-UobGfq9
```

Below is a complete **new** `categoriesData.js` reflecting your TSV and using direct-embed links. Pay special attention to the new `variants` arrays:

```js
// src/data/categoriesData.js

function fixDriveLink(shareUrl) {
  // Example input: "https://drive.google.com/file/d/1ABC123/view?usp=drive_link"
  // We extract "1ABC123" and return: "https://drive.google.com/uc?export=view&id=1ABC123"
  const match = shareUrl.match(/\/d\/([^/]+)\//);
  if (!match) {
    // If we can't parse, fallback to original or a placeholder
    return shareUrl;
  }
  const fileId = match[1];
  return `https://drive.google.com/uc?export=view&id=${fileId}`;
}

const categoriesData = [
  {
    id: 1,
    name: 'Desejos',
    // Convert to direct link:
    image: fixDriveLink('https://drive.google.com/file/d/1ek7Rw8ZpvLF15iHtbltq3uBD-UobGfq9/view?usp=drive_link'),

    products: [
      {
        id: 101,
        name: 'Harmonia',
        variants: [
          {
            // We can build a unique ID per variant if needed:
            id: 'harmonia-lavanda',
            name: 'Lavanda',
            price: 40,
            image: fixDriveLink('https://drive.google.com/file/d/12s1iaSYz6foLSWjPjWdE0-vyMbbdf4nD/view?usp=drive_link')
          },
        ]
      },
      {
        id: 102,
        name: 'Serenidade',
        variants: [
          {
            id: 'serenidade-orquidia',
            name: 'Orquídia',
            price: 40,
            image: fixDriveLink('https://drive.google.com/file/d/1L-Mq6LjbQ9UndSbmRHkp8S0TE0-hGmXa/view?usp=drive_link')
          },
        ]
      },
      {
        id: 103,
        name: 'Sorte',
        variants: [
          {
            id: 'sorte-herbal',
            name: 'Herbal',
            price: 40,
            image: fixDriveLink('https://drive.google.com/file/d/1ek7Rw8ZpvLF15iHtbltq3uBD-UobGfq9/view?usp=drive_link')
          }
        ]
      },
      {
        id: 104,
        name: 'Abundância',
        variants: [
          {
            id: 'abundancia-alecrim',
            name: 'Alecrim',
            price: 40,
            image: fixDriveLink('https://drive.google.com/file/d/1MBoVGnBn5CZMyO-YEWD1c0X19XGUVxRV/view?usp=drive_link')
          }
        ]
      },
      {
        id: 105,
        name: 'Vitalidade',
        variants: [
          {
            id: 'vitalidade-laranjeira',
            name: 'Flor de Laranjeira',
            price: 40,
            image: fixDriveLink('https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?usp=drive_link')
          }
        ]
      },
      {
        id: 106,
        name: 'Paixão',
        variants: [
          {
            id: 'paixao-cravoecanela',
            name: 'Cravo e Canela',
            price: 40,
            image: fixDriveLink('https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?usp=drive_link')
          }
        ]
      },
    ],
  },
  {
    id: 2,
    name: 'Clássicas',
    image: fixDriveLink('https://drive.google.com/file/d/12s1iaSYz6foLSWjPjWdE0-vyMbbdf4nD/view?usp=drive_link'),

    products: [
      {
        id: 201,
        name: 'Glitter',
        variants: [
          {
            id: 'glitter-lavanda',
            name: 'Lavanda',
            price: 50,
            image: fixDriveLink('https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?usp=drive_link')
          },
          {
            id: 'glitter-orquidia',
            name: 'Orquídia',
            price: 50,
            image: fixDriveLink('https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?usp=drive_link')
          },
          {
            id: 'glitter-herbal',
            name: 'Herbal',
            price: 50,
            image: fixDriveLink('https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?usp=drive_link')
          },
          {
            id: 'glitter-laranjeira',
            name: 'Flor de Laranjeira',
            price: 50,
            image: fixDriveLink('https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?usp=drive_link')
          },
        ],
      },
      {
        id: 202,
        name: 'Pote 230g',
        variants: [
          {
            id: 'pote230g-laranjeira',
            name: 'Flor de Laranjeira',
            price: 50,
            image: fixDriveLink('https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?usp=drive_link')
          }
        ]
      },
    ],
  },
  {
    id: 3,
    name: 'Gesso',
    image: fixDriveLink('https://drive.google.com/file/d/1L-Mq6LjbQ9UndSbmRHkp8S0TE0-hGmXa/view?usp=drive_link'),

    products: [
      {
        id: 301,
        name: 'Verde',
        variants: [
          {
            id: 'verde-herbal',
            name: 'Herbal',
            price: 45,
            image: fixDriveLink('https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?usp=drive_link')
          }
        ]
      },
      {
        id: 302,
        name: 'Roxo',
        variants: [
          {
            id: 'roxo-lavanda',
            name: 'Lavanda',
            price: 45,
            image: fixDriveLink('https://drive.google.com/file/d/1sSmTwQ7_uydwHvSsDKnrzAsPukmlhuU0/view?usp=drive_link')
          }
        ]
      },
    ],
  },
];

export default categoriesData;
```

> **Key differences** from your previous version:
> - Each `product` now has a `variants` array.  
> - Each variant has `name`, `price`, `image`, plus an **ID** for easy tracking.  
> - We added a helper `fixDriveLink()` to convert your Google Drive share URLs to direct-embed URLs.  

---

## 2) Creating a Product Detail Page with Variant Selection

Because we now have products that can hold **multiple variants**, let’s create or modify a detail page (e.g. `ProductDetail.js`). A simple approach is:

1. **Route**: `"/product/:productId"`  
2. We’ll **find** the product from `categoriesData` (by ID or by slug).  
3. **Render** the list of variants (e.g. a `<select>` or a grid of radio buttons).  
4. On “Add to Cart,” we attach the chosen `variant`.

Below is an **example** detail page. You can adapt it to your style:

```js
// src/pages/ProductDetail.js
import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import categoriesData from '../data/categoriesData';
import { useCart } from '../context/CartContext';

function ProductDetail() {
  const { productId } = useParams(); 
  const { addToCart } = useCart();
  const [selectedVariant, setSelectedVariant] = useState(null);

  // Find which product in which category matches productId (which is a number/string)
  let foundProduct = null;

  for (let category of categoriesData) {
    const prod = category.products.find(p => p.id.toString() === productId);
    if (prod) {
      foundProduct = { ...prod, categoryName: category.name };
      break;
    }
  }

  if (!foundProduct) {
    return <div style={{ padding: '2rem' }}>Produto não encontrado.</div>;
  }

  const handleAddToCart = () => {
    if (!selectedVariant) return;

    // We'll pass an object containing both product info AND variant info to addToCart.
    // For example, store them as { productId, productName, variantId, variantName, price, image }.
    const cartItem = {
      id: `${foundProduct.id}-${selectedVariant.id}`,  // unique combo
      productId: foundProduct.id,
      name: foundProduct.name,        // e.g. "Glitter"
      variant: selectedVariant.name,  // e.g. "Lavanda"
      price: selectedVariant.price,
      image: selectedVariant.image,
    };
    addToCart(cartItem);
  };

  return (
    <div style={{ padding: '2rem' }}>
      <h2>{foundProduct.name}</h2>
      <p style={{ color: '#666' }}>Categoria: {foundProduct.categoryName}</p>
      
      {/* If product has multiple variants, show them all */}
      {foundProduct.variants.length > 1 && <p>Escolha a variante:</p>}
      
      <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>
        {foundProduct.variants.map((variant) => (
          <div
            key={variant.id}
            onClick={() => setSelectedVariant(variant)}
            style={{
              cursor: 'pointer',
              border: selectedVariant?.id === variant.id ? '2px solid #8b7355' : '1px solid #ccc',
              borderRadius: '6px',
              padding: '1rem',
              textAlign: 'center',
              width: '150px'
            }}
          >
            <img 
              src={variant.image} 
              alt={variant.name} 
              style={{ width: '100%', height: '100px', objectFit: 'cover', marginBottom: '0.5rem' }}
            />
            <strong>{variant.name}</strong>
            <p style={{ margin: '0.5rem 0' }}>R$ {variant.price.toFixed(2)}</p>
          </div>
        ))}
      </div>

      <button 
        className="btn" 
        onClick={handleAddToCart} 
        disabled={!selectedVariant} 
        style={{ marginTop: '1rem' }}
      >
        Adicionar ao Carrinho
      </button>
    </div>
  );
}

export default ProductDetail;
```

### Routing Example

In your `App.js`, add a route like:

```js
// src/App.js
import ProductDetail from './pages/ProductDetail';
...
<Routes>
  <Route path="/" element={<Home />} />
  <Route path="/produtos" element={<Products />} />
  
  {/* New route for a specific product, e.g. /produto/201 */}
  <Route path="/produto/:productId" element={<ProductDetail />} />

  <Route path="/cart" element={<Cart />} />
</Routes>
```

### Linking to the Detail Page

On your `Products.js`, instead of linking to `"#"` for “Detalhes,” you can do:

```js
<Link
  to={`/produto/${product.id}`}
  className="btn"
  style={{ textDecoration: 'none' }}
>
  Detalhes
</Link>
```

> This ensures that when a user clicks “Detalhes,” it goes to something like `"/produto/201"`, where `201` is your product’s ID.

---

## 3) Ensure Variant Appears in the Cart

Your `CartContext` is already storing items as an array of objects. The main tweak is to include a `variant` (or similar) property in each cart item. In the sample `ProductDetail` above, we used:

```js
const cartItem = {
  id: `${foundProduct.id}-${selectedVariant.id}`,  // combine product + variant
  productId: foundProduct.id,
  name: foundProduct.name,
  variant: selectedVariant.name,
  price: selectedVariant.price,
  image: selectedVariant.image,
};
```

Then in your `Cart.js`, you can display the `variant`:

```js
<li key={item.id}>
  {item.name} 
  {item.variant && <span> - {item.variant}</span>} 
  &nbsp; x {item.quantity} 
  &nbsp; (R$ {item.price.toFixed(2)})
</li>
```

Or in a table format:

```jsx
<tr>
  <td>
    {item.name}
    {item.variant && <div style={{ fontSize: '0.9rem', color: '#555' }}>
      Variante: {item.variant}
    </div>}
  </td>
  <td>R$ {item.price.toFixed(2)}</td>
  ...
</tr>
```

---

## Final Thoughts

- **Drive links**: Always convert to `https://drive.google.com/uc?export=view&id=<FILE_ID>` for images.  
- **Data structure**: We group repeated “Produto” rows into a single `products[]` item with multiple `variants[]`.  
- **Detail page**: Let the user pick a variant, then add to cart with `variant` info.  
- **Cart**: Display both the product name **and** variant name so the user knows exactly which variant they chose.  

With these adjustments, you’ll have **clean category and product data**, robust handling of **variants**, and images that are properly embeddable from Google Drive. Enjoy building your store!